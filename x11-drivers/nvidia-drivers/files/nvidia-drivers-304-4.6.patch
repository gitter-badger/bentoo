--- a/kernel/nv-mlock.c
+++ b/kernel/nv-mlock.c
@@ -49,8 +49,13 @@
     }
 
     down_read(&mm->mmap_sem);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
     ret = get_user_pages(current, mm, (unsigned long)address,
             page_count, write, force, user_pages, NULL);
+#else
+    ret = get_user_pages_remote(current, mm, (unsigned long)address,
+            page_count, write, force, user_pages, NULL);
+#endif
     up_read(&mm->mmap_sem);
     pinned = ret;
 
@@ -62,7 +67,11 @@
     else if (pinned < page_count)
     {
         for (i = 0; i < pinned; i++)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
             page_cache_release(user_pages[i]);
+#else
+            put_page(user_pages[i]);
+#endif
         os_free_mem(user_pages);
         return RM_ERR_INVALID_ADDRESS;
     }
@@ -80,7 +89,11 @@
             {
                 pci_unmap_page(dev, pte_array[j],
                         PAGE_SIZE, PCI_DMA_BIDIRECTIONAL);
-                page_cache_release(user_pages[j]);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
+            page_cache_release(user_pages[j]);
+#else
+            put_page(user_pages[j]);
+#endif
             }
             os_free_mem(user_pages);
             return RM_ERR_OPERATING_SYSTEM;
@@ -114,7 +127,11 @@
                 PAGE_SIZE, PCI_DMA_BIDIRECTIONAL);
         if (write)
             set_page_dirty_lock(user_pages[i]);
-        page_cache_release(user_pages[i]);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
+            page_cache_release(user_pages[i]);
+#else
+            put_page(user_pages[i]);
+#endif
     }
 
     os_free_mem(user_pages);
